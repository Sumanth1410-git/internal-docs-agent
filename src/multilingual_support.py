import json
import re
from pathlib import Path
from typing import Dict, Optional, List, Tuple
import logging

logger = logging.getLogger(__name__)

class MultilingualSupport:
    """Comprehensive multi-language support system"""
    
    def __init__(self):
        self.supported_languages = {
            'en': {'name': 'English', 'native': 'English'},
            'es': {'name': 'Spanish', 'native': 'Espa√±ol'},  
            'fr': {'name': 'French', 'native': 'Fran√ßais'},
            'de': {'name': 'German', 'native': 'Deutsch'},
            'hi': {'name': 'Hindi', 'native': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä'},
            'te': {'name': 'Telugu', 'native': '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å'},  # For your location in TS
            'ta': {'name': 'Tamil', 'native': '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç'},
            'zh': {'name': 'Chinese', 'native': '‰∏≠Êñá'},
            'ja': {'name': 'Japanese', 'native': 'Êó•Êú¨Ë™û'}
        }
        
        self.translations = self._load_translations()
        self.language_patterns = self._compile_language_patterns()
        
    def _load_translations(self) -> Dict:
        """Load comprehensive translation dictionaries"""
        
        translations = {
            'en': {
                'welcome': "Welcome to Internal Docs AI Assistant! I can help you with company policies, procedures, and documentation.",
                'processing': "üîÑ Processing your request...",
                'no_results': "I don't have that information in the company documentation. Could you try rephrasing your question?",
                'error': "I encountered an error processing your request. Please try again or contact support.",
                'sources': "üìö Sources",
                'confidence': "üéØ Confidence",
                'response_time': "‚è±Ô∏è Response time",
                'high_confidence': "High Confidence",
                'medium_confidence': "Medium Confidence", 
                'low_confidence': "Low Confidence",
                'help_message': "I can help with questions about company policies, HR procedures, technical documentation, and more. Just ask me anything!",
                'file_uploaded': "File uploaded successfully",
                'file_processing': "Processing uploaded file",
                'approval_needed': "This request requires approval",
                'approved': "Request approved",
                'rejected': "Request rejected"
            },
            
            'es': {
                'welcome': "¬°Bienvenido al Asistente de Documentos Internos AI! Puedo ayudarte con pol√≠ticas, procedimientos y documentaci√≥n de la empresa.",
                'processing': "üîÑ Procesando tu solicitud...",
                'no_results': "No tengo esa informaci√≥n en la documentaci√≥n de la empresa. ¬øPodr√≠as reformular tu pregunta?",
                'error': "Encontr√© un error al procesar tu solicitud. Int√©ntalo de nuevo o contacta con soporte.",
                'sources': "üìö Fuentes",
                'confidence': "üéØ Confianza",
                'response_time': "‚è±Ô∏è Tiempo de respuesta",
                'high_confidence': "Alta Confianza",
                'medium_confidence': "Confianza Media",
                'low_confidence': "Baja Confianza",
                'help_message': "Puedo ayudar con preguntas sobre pol√≠ticas de la empresa, procedimientos de RRHH, documentaci√≥n t√©cnica y m√°s. ¬°Solo preg√∫ntame!",
                'file_uploaded': "Archivo subido exitosamente",
                'file_processing': "Procesando archivo subido",
                'approval_needed': "Esta solicitud requiere aprobaci√≥n",
                'approved': "Solicitud aprobada",
                'rejected': "Solicitud rechazada"
            },
            
            'hi': {
                'welcome': "‡§Ü‡§Ç‡§§‡§∞‡§ø‡§ï ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º AI ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à! ‡§Æ‡•à‡§Ç ‡§ï‡§Ç‡§™‡§®‡•Ä ‡§ï‡•Ä ‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç, ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ì‡§Ç ‡§î‡§∞ ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•Ä‡§ï‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§",
                'processing': "üîÑ ‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•à...",
                'no_results': "‡§Æ‡•á‡§∞‡•á ‡§™‡§æ‡§∏ ‡§ï‡§Ç‡§™‡§®‡•Ä ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•Ä‡§ï‡§∞‡§£ ‡§Æ‡•á‡§Ç ‡§Ø‡§π ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§ ‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§Ö‡§™‡§®‡§æ ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§¶‡•ã‡§¨‡§æ‡§∞‡§æ ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç?",
                'error': "‡§Ü‡§™‡§ï‡•á ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡•ã ‡§∏‡§Ç‡§∏‡§æ‡§ß‡§ø‡§§ ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§Æ‡•Å‡§ù‡•á ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡§æ ‡§∏‡§æ‡§Æ‡§®‡§æ ‡§ï‡§∞‡§®‡§æ ‡§™‡§°‡§º‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§",
                'sources': "üìö ‡§∏‡•ç‡§∞‡•ã‡§§",
                'confidence': "üéØ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
                'response_time': "‚è±Ô∏è ‡§™‡•ç‡§∞‡§§‡§ø‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§∏‡§Æ‡§Ø",
                'high_confidence': "‡§â‡§ö‡•ç‡§ö ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
                'medium_confidence': "‡§Æ‡§ß‡•ç‡§Ø‡§Æ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
                'low_confidence': "‡§ï‡§Æ ‡§µ‡§ø‡§∂‡•ç‡§µ‡§æ‡§∏",
                'help_message': "‡§Æ‡•à‡§Ç ‡§ï‡§Ç‡§™‡§®‡•Ä ‡§®‡•Ä‡§§‡§ø‡§Ø‡•ã‡§Ç, HR ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§ì‡§Ç, ‡§§‡§ï‡§®‡•Ä‡§ï‡•Ä ‡§¶‡§∏‡•ç‡§§‡§æ‡§µ‡•á‡§ú‡§º‡•Ä‡§ï‡§∞‡§£ ‡§î‡§∞ ‡§Ö‡§ß‡§ø‡§ï ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§∂‡•ç‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§¨‡§∏ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§™‡•Ç‡§õ‡•á‡§Ç!",
                'file_uploaded': "‡§´‡§º‡§æ‡§á‡§≤ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•Å‡§à",
                'file_processing': "‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡•Ä ‡§ó‡§à ‡§´‡§º‡§æ‡§á‡§≤ ‡§ï‡§æ ‡§™‡•ç‡§∞‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£",
                'approval_needed': "‡§á‡§∏ ‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§ï‡•ã ‡§Ö‡§®‡•Å‡§Æ‡•ã‡§¶‡§® ‡§ï‡•Ä ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï‡§§‡§æ ‡§π‡•à",
                'approved': "‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§",
                'rejected': "‡§Ö‡§®‡•Å‡§∞‡•ã‡§ß ‡§Ö‡§∏‡•ç‡§µ‡•Ä‡§ï‡•É‡§§"
            },
            
            'te': {  # Telugu for your location in Telangana
                'welcome': "‡∞Ö‡∞Ç‡∞§‡∞∞‡±ç‡∞ó‡∞§ ‡∞™‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å AI ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡∞ø‡∞ï‡∞ø ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç! ‡∞®‡±á‡∞®‡±Å ‡∞ï‡∞Ç‡∞™‡±Ü‡∞®‡±Ä ‡∞µ‡∞ø‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡±Å, ‡∞™‡±ç‡∞∞‡∞ï‡±ç‡∞∞‡∞ø‡∞Ø‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞°‡∞æ‡∞ï‡±ç‡∞Ø‡±Å‡∞Æ‡±Ü‡∞Ç‡∞ü‡±á‡∞∑‡∞®‡±ç‚Äå‡∞≤‡±ã ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å.",
                'processing': "üîÑ ‡∞Æ‡±Ä ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞®‡±Å ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å...",
                'no_results': "‡∞ï‡∞Ç‡∞™‡±Ü‡∞®‡±Ä ‡∞°‡∞æ‡∞ï‡±ç‡∞Ø‡±Å‡∞Æ‡±Ü‡∞Ç‡∞ü‡±á‡∞∑‡∞®‡±ç‚Äå‡∞≤‡±ã ‡∞®‡∞æ ‡∞¶‡∞ó‡±ç‡∞ó‡∞∞ ‡∞Ü ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç ‡∞≤‡±á‡∞¶‡±Å. ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞®‡±Å ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞Ö‡∞°‡∞ó‡∞ó‡∞≤‡∞∞‡∞æ?",
                'error': "‡∞Æ‡±Ä ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞®‡±Å ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞Ø‡∞°‡∞Ç‡∞≤‡±ã ‡∞®‡∞æ‡∞ï‡±Å ‡∞≤‡±ã‡∞™‡∞Ç ‡∞é‡∞¶‡±Å‡∞∞‡±à‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø.",
                'sources': "üìö ‡∞Æ‡±Ç‡∞≤‡∞æ‡∞≤‡±Å",
                'confidence': "üéØ ‡∞µ‡∞ø‡∞∂‡±ç‡∞µ‡∞æ‡∞∏‡∞Ç",
                'response_time': "‚è±Ô∏è ‡∞™‡±ç‡∞∞‡∞§‡∞ø‡∞∏‡±ç‡∞™‡∞Ç‡∞¶‡∞® ‡∞∏‡∞Æ‡∞Ø‡∞Ç",
                'high_confidence': "‡∞Ö‡∞ß‡∞ø‡∞ï ‡∞µ‡∞ø‡∞∂‡±ç‡∞µ‡∞æ‡∞∏‡∞Ç",
                'medium_confidence': "‡∞Æ‡∞ß‡±ç‡∞Ø ‡∞µ‡∞ø‡∞∂‡±ç‡∞µ‡∞æ‡∞∏‡∞Ç",
                'low_confidence': "‡∞§‡∞ï‡±ç‡∞ï‡±Å‡∞µ ‡∞µ‡∞ø‡∞∂‡±ç‡∞µ‡∞æ‡∞∏‡∞Ç",
                'help_message': "‡∞®‡±á‡∞®‡±Å ‡∞ï‡∞Ç‡∞™‡±Ü‡∞®‡±Ä ‡∞µ‡∞ø‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡±Å, HR ‡∞™‡±ç‡∞∞‡∞ï‡±ç‡∞∞‡∞ø‡∞Ø‡∞≤‡±Å, ‡∞∏‡∞æ‡∞Ç‡∞ï‡±á‡∞§‡∞ø‡∞ï ‡∞°‡∞æ‡∞ï‡±ç‡∞Ø‡±Å‡∞Æ‡±Ü‡∞Ç‡∞ü‡±á‡∞∑‡∞®‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø‡∞® ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡∞≤‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å. ‡∞®‡∞®‡±ç‡∞®‡±Å ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø!",
                'file_uploaded': "‡∞´‡±à‡∞≤‡±ç ‡∞µ‡∞ø‡∞ú‡∞Ø‡∞µ‡∞Ç‡∞§‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞Ø‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø",
                'file_processing': "‡∞Ö‡∞™‡±ç‚Äå‡∞≤‡±ã‡∞°‡±ç ‡∞ö‡±á‡∞∏‡∞ø‡∞® ‡∞´‡±à‡∞≤‡±ç‚Äå‡∞®‡±Å ‡∞™‡±ç‡∞∞‡∞æ‡∞∏‡±Ü‡∞∏‡±ç ‡∞ö‡±á‡∞∏‡±ç‡∞§‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å",
                'approval_needed': "‡∞à ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞®‡∞ï‡±Å ‡∞Ö‡∞®‡±Å‡∞Æ‡∞§‡∞ø ‡∞Ö‡∞µ‡∞∏‡∞∞‡∞Ç",
                'approved': "‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞® ‡∞Ü‡∞Æ‡±ã‡∞¶‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø",
                'rejected': "‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∞‡±ç‡∞•‡∞® ‡∞§‡∞ø‡∞∞‡∞∏‡±ç‡∞ï‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø"
            },
            
            'fr': {
                'welcome': "Bienvenue dans l'Assistant IA de Documents Internes! Je peux vous aider avec les politiques, proc√©dures et documentation de l'entreprise.",
                'processing': "üîÑ Traitement de votre demande...",
                'no_results': "Je n'ai pas cette information dans la documentation de l'entreprise. Pourriez-vous reformuler votre question?",
                'error': "J'ai rencontr√© une erreur lors du traitement de votre demande. Veuillez r√©essayer.",
                'sources': "üìö Sources",
                'confidence': "üéØ Confiance",
                'response_time': "‚è±Ô∏è Temps de r√©ponse",
                'high_confidence': "Haute Confiance",
                'medium_confidence': "Confiance Moyenne",
                'low_confidence': "Faible Confiance",
                'help_message': "Je peux aider avec les questions sur les politiques d'entreprise, proc√©dures RH, documentation technique et plus. Demandez-moi n'importe quoi!",
                'file_uploaded': "Fichier t√©l√©charg√© avec succ√®s",
                'file_processing': "Traitement du fichier t√©l√©charg√©",
                'approval_needed': "Cette demande n√©cessite une approbation",
                'approved': "Demande approuv√©e",
                'rejected': "Demande rejet√©e"
            },
            
            'de': {
                'welcome': "Willkommen beim Internen Dokumenten-KI-Assistenten! Ich kann Ihnen bei Unternehmensrichtlinien, Verfahren und Dokumentation helfen.",
                'processing': "üîÑ Verarbeitung Ihrer Anfrage...",
                'no_results': "Ich habe diese Information nicht in der Unternehmensdokumentation. K√∂nnten Sie Ihre Frage umformulieren?",
                'error': "Bei der Verarbeitung Ihrer Anfrage ist ein Fehler aufgetreten. Bitte versuchen Sie es erneut.",
                'sources': "üìö Quellen",
                'confidence': "üéØ Vertrauen",
                'response_time': "‚è±Ô∏è Antwortzeit",
                'high_confidence': "Hohes Vertrauen",
                'medium_confidence': "Mittleres Vertrauen",
                'low_confidence': "Geringes Vertrauen",
                'help_message': "Ich kann bei Fragen zu Unternehmensrichtlinien, HR-Verfahren, technischer Dokumentation und mehr helfen. Fragen Sie mich einfach!",
                'file_uploaded': "Datei erfolgreich hochgeladen",
                'file_processing': "Verarbeitung der hochgeladenen Datei",
                'approval_needed': "Diese Anfrage erfordert eine Genehmigung",
                'approved': "Anfrage genehmigt",
                'rejected': "Anfrage abgelehnt"
            }
        }
        
        return translations
    
    def _compile_language_patterns(self) -> Dict:
        """Compile regex patterns for language detection"""
        
        patterns = {
            'te': [
                r'[\u0C00-\u0C7F]+',  # Telugu script range
                r'\b(‡∞é‡∞≤‡∞æ|‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø|‡∞é‡∞Ç‡∞¶‡±Å‡∞ï‡±Å|‡∞é‡∞™‡±ç‡∞™‡±Å‡∞°‡±Å|‡∞é‡∞ï‡±ç‡∞ï‡∞°|‡∞é‡∞µ‡∞∞‡±Å|‡∞ï‡±ç‡∞∞‡∞ø‡∞Ç‡∞¶‡∞ø|‡∞Æ‡±Ä‡∞∞‡±Å|‡∞®‡±á‡∞®‡±Å|‡∞Æ‡∞æ|‡∞Æ‡±Ä)\b'
            ],
            'hi': [
                r'[\u0900-\u097F]+',  # Devanagari script range
                r'\b(‡§ï‡•à‡§∏‡•á|‡§ï‡•ç‡§Ø‡§æ|‡§ï‡•ç‡§Ø‡•ã‡§Ç|‡§ï‡§¨|‡§ï‡§π‡§æ‡§Å|‡§ï‡•å‡§®|‡§Ü‡§™|‡§Æ‡•à‡§Ç|‡§π‡§Æ|‡§Ø‡§π|‡§µ‡§π)\b'
            ],
            'ta': [
                r'[\u0B80-\u0BFF]+',  # Tamil script range
                r'\b(‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø|‡Æé‡Æ©‡Øç‡Æ©|‡Æè‡Æ©‡Øç|‡Æé‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ|‡Æé‡Æô‡Øç‡Æï‡Øá|‡ÆØ‡Ææ‡Æ∞‡Øç|‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç|‡Æ®‡Ææ‡Æ©‡Øç|‡Æ®‡Ææ‡ÆÆ‡Øç)\b'
            ],
            'es': [
                r'\b(c√≥mo|qu√©|por qu√©|cu√°ndo|d√≥nde|qui√©n|usted|t√∫|nosotros|pol√≠tica|empresa|beneficios)\b',
                r'\b(¬ø|¬°|√±|√≥|√©|√≠|√°|√∫)\b'
            ],
            'fr': [
                r'\b(comment|quoi|pourquoi|quand|o√π|qui|vous|nous|politique|entreprise|avantages)\b',
                r'\b(√ß|√©|√®|√™|√´|√Æ|√Ø|√¥|√π|√ª|√º|√ø|√†|√¢)\b'
            ],
            'de': [
                r'\b(wie|was|warum|wann|wo|wer|Sie|wir|Politik|Unternehmen|Vorteile)\b',
                r'\b(√§|√∂|√º|√ü|√Ñ|√ñ|√ú)\b'
            ]
        }
        
        # Compile patterns
        compiled_patterns = {}
        for lang, pattern_list in patterns.items():
            compiled_patterns[lang] = [re.compile(pattern, re.IGNORECASE) for pattern in pattern_list]
        
        return compiled_patterns
    
    def detect_language(self, text: str) -> Tuple[str, float]:
        """Detect language with confidence score"""
        
        if not text or len(text.strip()) < 3:
            return 'en', 0.5
        
        text = text.strip()
        scores = {'en': 0.1}  # Default English with low score
        
        # Check for script-based detection first (most reliable)
        for lang, patterns in self.language_patterns.items():
            score = 0
            text_length = len(text)
            
            for pattern in patterns:
                matches = pattern.findall(text)
                if matches:
                    # Calculate score based on match density
                    match_chars = sum(len(match) for match in matches)
                    score += (match_chars / text_length) * 10
            
            if score > 0:
                scores[lang] = min(score, 10)  # Cap at 10
        
        # Find language with highest score
        detected_lang = max(scores.items(), key=lambda x: x[1])
        
        # Normalize confidence to 0-1 range
        confidence = min(detected_lang[1] / 5, 1.0)
        
        return detected_lang[0], confidence
    
    def translate_message(self, message_key: str, target_language: str, **kwargs) -> str:
        """Get translated message for given key"""
        
        if target_language not in self.supported_languages:
            target_language = 'en'
        
        translations = self.translations.get(target_language, self.translations['en'])
        message = translations.get(message_key, message_key)
        
        # Format message with kwargs if provided
        try:
            if kwargs:
                message = message.format(**kwargs)
        except (KeyError, ValueError):
            pass  # Use original message if formatting fails
        
        return message
    
    def format_response_with_language(self, response_data: Dict, user_language: str) -> str:
        """Format RAG response with appropriate language"""
        
        answer = response_data.get('answer', '')
        sources = response_data.get('source_documents', [])
        confidence = response_data.get('confidence_score', 0.0)
        response_time = response_data.get('response_time', 0.0)
        
        # Translate system messages
        sources_label = self.translate_message('sources', user_language)
        confidence_label = self.translate_message('confidence', user_language)
        time_label = self.translate_message('response_time', user_language)
        
        # Determine confidence level translation
        if confidence > 0.7:
            confidence_text = self.translate_message('high_confidence', user_language)
            confidence_emoji = "üü¢"
        elif confidence > 0.4:
            confidence_text = self.translate_message('medium_confidence', user_language)
            confidence_emoji = "üü°"
        else:
            confidence_text = self.translate_message('low_confidence', user_language)
            confidence_emoji = "üî¥"
        
        # Build formatted response
        formatted_response = f"ü§ñ {answer}\n\n"
        formatted_response += f"{confidence_emoji} {confidence_text} | {time_label}: {response_time:.1f}s | {sources_label}: {len(sources)}\n"
        
        # Add sources if available
        if sources:
            formatted_response += f"\nüìö {sources_label}:\n"
            for i, doc in enumerate(sources[:3]):
                source_file = doc.metadata.get('source_file', 'Unknown')
                preview = doc.page_content[:100] + "..." if len(doc.page_content) > 100 else doc.page_content
                formatted_response += f"‚Ä¢ `{source_file}`: {preview}\n"
        
        return formatted_response
    
    def get_language_selection_blocks(self, current_language: str = 'en') -> List[Dict]:
        """Generate Slack blocks for language selection"""
        
        blocks = [
            {
                "type": "header",
                "text": {
                    "type": "plain_text",
                    "text": "üåê Select Your Language / ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / ‡∞≠‡∞æ‡∞∑ ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø"
                }
            },
            {
                "type": "section",
                "text": {
                    "type": "mrkdwn",
                    "text": f"Current language: *{self.supported_languages[current_language]['native']}*\n\nSelect your preferred language for interactions:"
                }
            }
        ]
        
        # Create language selection buttons
        elements = []
        for lang_code, lang_info in self.supported_languages.items():
            elements.append({
                "type": "button",
                "text": {
                    "type": "plain_text",
                    "text": f"{lang_info['native']}"
                },
                "value": lang_code,
                "action_id": f"select_language_{lang_code}"
            })
            
            # Add new row after every 3 buttons
            if len(elements) == 3:
                blocks.append({
                    "type": "actions",
                    "elements": elements.copy()
                })
                elements.clear()
        
        # Add remaining buttons
        if elements:
            blocks.append({
                "type": "actions",
                "elements": elements
            })
        
        return blocks
    
    def get_supported_languages_info(self) -> str:
        """Get information about supported languages"""
        
        info = "üåê **Supported Languages:**\n\n"
        
        for lang_code, lang_info in self.supported_languages.items():
            info += f"‚Ä¢ **{lang_info['name']}** ({lang_info['native']}) - Code: `{lang_code}`\n"
        
        info += "\n**Language Detection:**\n"
        info += "‚Ä¢ Automatic detection based on text content\n"
        info += "‚Ä¢ Script-based detection for Indian languages\n"
        info += "‚Ä¢ Keyword pattern matching for European languages\n"
        info += "‚Ä¢ Confidence scoring for accuracy\n"
        
        info += "\n**Features:**\n"
        info += "‚Ä¢ System messages translated to your language\n"
        info += "‚Ä¢ UI elements localized\n"
        info += "‚Ä¢ Help content in native language\n"
        info += "‚Ä¢ Error messages translated\n"
        
        return info
